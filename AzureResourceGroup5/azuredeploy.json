{
  // Define the schema and content version of the deployment template
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  // Define input parameters for the deployment template
  "parameters": {
    // Azure location for the resources (e.g., "East US", "West Europe")
    "location": { "type": "string" },

    // Type of OS disk to use (e.g., "Standard_LRS", "Premium_LRS")
    "osDiskType": { "type": "string" },

    // Define address prefixes for the virtual network
    "addressPrefixes": { "type": "array" },

    // Define subnets for the virtual network
    "subnets": { "type": "array" },

    // Virtual Network ID to which the VMSS belongs
    "virtualNetworkId": { "type": "string" },

    // Name of the virtual network
    "virtualNetworkName": { "type": "string" },

    // Array of network security groups and their rules
    "networkSecurityGroups": { "type": "array" },

    // Network interface configurations for the VMSS
    "networkInterfaceConfigurations": { "type": "array" },

    // Name of the backend pool for load balancing
    "backendPoolName": { "type": "string" },

    // Name of the load balancer
    "loadBalancerName": { "type": "string" },

    // Load balancing rule parameters
    "loadbalancingRuleFrontEndPort": { "type": "int" },
    "loadbalancingRuleBackendEndPort": { "type": "int" },
    "loadbalancingRuleProtocol": { "type": "string" },

    // Front-end NAT rule starting port
    "InboundNATRuleFrontEndPortRangeStart": { "type": "int" },

    // Name and properties for the VM and VM scale set
    "vmName": { "type": "string" },
    "virtualMachineScaleSetName": { "type": "string" },
    "instanceCount": { "type": "string" },
    "instanceSize": { "type": "string" },

    // Availability zones for the VMs
    "zone": { "type": "array" },
    "zoneBalance": { "type": "string" },

    // Fault domain count for high availability
    "platformFaultDomainCount": { "type": "string" },

    // Scaling policies
    "scaleInPolicy": { "type": "object" },
    "upgradePolicy": { "type": "string" },

    // Hibernation capability
    "hibernationEnabled": { "type": "bool" },

    // Administrative credentials for the VMs
    "adminUsername": { "type": "string" },
    "adminPassword": { "type": "secureString" },

    // Custom data for cloud-init (for Linux VMs)
    "customData": { "type": "string" },

    // Security settings for the VM (e.g., Secure Boot)
    "securityType": { "type": "string" },
    "secureBoot": { "type": "bool" },
    "vTPM": { "type": "bool" },

    // Health monitoring settings
    "healthExtensionProtocol": { "type": "string" },
    "healthExtensionPort": { "type": "int" },
    "healthExtensionRequestPath": { "type": "string" },

    // Auto-repairs settings
    "autoRepairsPolicyEnabled": { "type": "bool" },
    "gracePeriod": { "type": "string" },
    "autoRepairsAction": { "type": "string" }
  },

  // Define variables used within the template
  "variables": {
    "storageApiVersion": "2021-01-01",
    "networkApiVersion": "2020-11-01",
    "virtualMachineScaleSetApiVersion": "2024-07-01",

    // Create a naming suffix for resources
    "namingInfix": "[toLower(substring(concat(parameters('virtualMachineScaleSetName'), uniqueString(resourceGroup().id)), 0, 9))]",

    // Autoscale resource name
    "autoScaleResourceName": "[concat(substring(parameters('virtualMachineScaleSetName'), 0, min(length(parameters('virtualMachineScaleSetName')), 55)), 'autoscale')]",

    // VMSS resource ID
    "vmssId": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('virtualMachineScaleSetName'))]"
  },

  // Define resources to be deployed
  "resources": [
    {
      // Create a virtual network
      "name": "[parameters('virtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2024-01-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": { "addressPrefixes": "[parameters('addressPrefixes')]" },
        "subnets": "[parameters('subnets')]"
      }
    },
    {
      // Create network security groups for each network interface
      "name": "[parameters('networkSecurityGroups')[copyIndex()].name]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "location": "[parameters('location')]",
      "properties": { "securityRules": "[parameters('networkSecurityGroups')[copyIndex()].rules]" },
      "copy": {
        "name": "networkSecurityGroups",
        "count": "[length(parameters('networkSecurityGroups'))]"
      }
    },
    {
      // Create a public IP address for the load balancer
      "name": "[concat(parameters('loadBalancerName'), '-publicip')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2020-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "publicIpAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4",
        "idleTimeoutInMinutes": 15
      },
      "sku": { "name": "Standard" },
      "zones": [ "1", "2" ]
    },
    {
      // Define the load balancer for the VM scale set
      "name": "[parameters('loadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-05-01",
      "location": "[parameters('location')]",
      "sku": { "name": "Standard" },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat(parameters('loadBalancerName'), '-frontendconfig01')]",
            "properties": {
              "publicIPAddress": { "id": "[resourceId('Microsoft.Network/publicIpAddresses', concat(parameters('loadBalancerName'), '-publicip'))]" }
            }
          }
        ],
        "backendAddressPools": [ { "name": "[parameters('backendPoolName')]" } ],
        "loadBalancingRules": [
          {
            "name": "[concat(parameters('loadBalancerName'), '-lbrule01')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('loadBalancerName'), concat(parameters('loadBalancerName'), '-frontendconfig01'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), parameters('backendPoolName'))]"
              },
              "frontendPort": "[parameters('loadbalancingRuleFrontEndPort')]",
              "backendPort": "[parameters('loadbalancingRuleBackendEndPort')]",
              "protocol": "[parameters('loadbalancingRuleProtocol')]",
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), concat(parameters('loadBalancerName'), '-probe01'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[concat(parameters('loadBalancerName'), '-probe01')]",
            "properties": {
              "intervalInSeconds": 15,
              "numberOfProbes": 2,
              "protocol": "[if(equals(parameters('loadbalancingRuleProtocol'),'Tcp'), 'Tcp', 'Http')]"
            }
          }
        ],
        "inboundNatRules": [
          {
            "name": "[concat(parameters('loadBalancerName'), '-natRule01')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('loadBalancerName'), concat(parameters('loadBalancerName'), '-frontendconfig01'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), parameters('backendPoolName'))]"
              },
              "protocol": "TCP",
              "backendPort": 22
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIpAddresses/', concat(parameters('loadBalancerName'), '-publicip'))]"
      ]
    },
    {
      // Define auto-scaling settings for the VM scale set
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2021-05-01-preview",
      "name": "[variables('autoScaleResourceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', parameters('virtualMachineScaleSetName'))]"
      ],
      "properties": {
        "name": "[variables('autoScaleResourceName')]",
        "enabled": true,
        "profiles": [
          {
            "name": "Default condition",
            "capacity": {
              "default": 2,
              "minimum": 2,
              "maximum": 20
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "operator": "GreaterThan",
                  "threshold": "50"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "operator": "LessThan",
                  "threshold": "20"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1"
                }
              }
            ]
          }
        ]
      }
    },
    {
      // Define the virtual machine scale set itself
      "name": "[parameters('virtualMachineScaleSetName')]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "[variables('virtualMachineScaleSetApiVersion')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]"
      ],
      "properties": {
        "virtualMachineProfile": {
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "customData": "[parameters('customData')]"
        },
        "upgradePolicy": { "mode": "[parameters('upgradePolicy')]" }
      },
      "sku": {
        "name": "[parameters('instanceSize')]",
        "capacity": "[int(parameters('instanceCount'))]"
      },
      "zones": "[parameters('zone')]"
    }
  ],

  // Define outputs from the template
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    }
  }
}
